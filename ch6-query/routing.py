# llamaindex==0.12.16

import json
from llama_index.core.selectors import (
    LLMSingleSelector,
    LLMMultiSelector,
    PydanticMultiSelector,
    PydanticSingleSelector,
)
from llama_index.core.tools import ToolMetadata

# pydantic selectors feed in pydantic objects to a function calling API
# single selector (pydantic, function calling)
# selector = PydanticSingleSelector.from_defaults()
# multi selector (pydantic, function calling)
# selector = PydanticMultiSelector.from_defaults()
# LLM selectors use text completion endpoints
# single selector (LLM)
# selector = LLMSingleSelector.from_defaults()
# multi selector (LLM)


# Define a helper function to pretty-print the prompts dictionary.
def display_prompt_dict(prompts: dict):
    print("Selector Prompts:")
    print(json.dumps(prompts, indent=4))

# Instantiate an LLM-based multi-selector with default settings.
selector = LLMMultiSelector.from_defaults()

# Define a list of tool metadata objects representing available tools.
tool_choices = [
    ToolMetadata(
        name="query_routing",
        description="This tool contains a paper about routing method"
    ),
    ToolMetadata(
        name="query_rewriting",
        description="This tool contains the Wikipedia page about rewriting method"
    ),
    ToolMetadata(
        name="query_react",
        description="This tool contains the Wikipedia page about react method"
    ),
]# Custom JSON encoder to handle PromptTemplate objects
class PromptTemplateEncoder(json.JSONEncoder):
    def default(self, obj):
        try:
            # Attempt to serialize using the object's __dict__ or str representation
            return str(obj)
        except Exception:
            return super().default(obj)

# Define a helper function to pretty-print the prompts dictionary.
def display_prompt_dict(prompts: dict):
    print("Selector Prompts:")
    # Use the custom encoder to handle non-serializable objects
    print(json.dumps(prompts, indent=4, cls=PromptTemplateEncoder))


# Display the prompts generated by the selector.
display_prompt_dict(selector.get_prompts())

# Use the selector to choose the most relevant tool for the query.
selector_result = selector.select(
    tool_choices,
    query="Tell me more about rewriting methods"
)

# Print the selection results.
print("\nSelected Tool(s):")
print(selector_result.selections)
